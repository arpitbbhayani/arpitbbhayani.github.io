<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Arpit Bhayani | Python, NodeJS, Go and C++ are the languages I speak.</title>
    <description>Blogs, Open source projects, solution to programming questions.</description>
    <link>http://arpitbhayani.me/</link>
    <atom:link href="http://arpitbhayani.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 24 Aug 2017 22:45:44 +0530</pubDate>
    <lastBuildDate>Thu, 24 Aug 2017 22:45:44 +0530</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>Confusion Matrix Made Simple</title>
        <description>&lt;p&gt;When I started with Data Mining 101, the first thing I came across was known as ‚ÄúThe Confusion Matrix‚Äù. It seemed interesting at first so I started diving deep. It looked very simple at first, but then when more terms were introduced, things become complicated rather confusing; and then I realized the reason it is called &lt;strong&gt;‚ÄúThe Confusion Matrix‚Äù&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The terms True/False Positives/Negatives are really very confusing to remember and hence I found a sleek way to understand it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Just add ‚Äúly predicted as‚Äù between two words&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So,
True Positive ‚Üí Truly predicted as Positive
False Positive ‚Üí Falsely predicted as Positive
True Negative‚Üí Truly predicted as Negative
False Negative ‚Üí Falsely predicted as Negative&lt;/p&gt;

&lt;h2 id=&quot;interpreting-truefalse-positivenegative&quot;&gt;Interpreting True/False Positive/Negative&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;True Positive:&lt;/strong&gt;
The data point is a True Positive if it is &lt;code&gt;truly&lt;/code&gt; predicted as &lt;code&gt;positive&lt;/code&gt;. If I try to elaborate &lt;code&gt;truly&lt;/code&gt; we get something like this: The data point is a True Positive if it is actually positive and is truly predicted as positive.&lt;/p&gt;

&lt;p&gt;For a food lover:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When a Burger is predicted as Burger and not Hotdog it comes under True Positive.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Burger - Positive Class&lt;/li&gt;
  &lt;li&gt;Hotdog - Negative Class&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For an animal lover:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When a Dog is predicted as God and not Cat it comes under True Positive.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Dog - Positive Class&lt;/li&gt;
  &lt;li&gt;Cat - Negative Class&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;False Positive&lt;/strong&gt;:
It will be interesting when we try to interpret  False Positive.
The data point is a False Positive if it is &lt;code&gt;falsely&lt;/code&gt; predicted as &lt;code&gt;positive&lt;/code&gt;. If I try to elaborate &lt;code&gt;falsely&lt;/code&gt; we get something like this: The data point is &lt;code&gt;False Positive&lt;/code&gt; if it is actually &lt;code&gt;Negative&lt;/code&gt; but it is &lt;code&gt;falsely&lt;/code&gt; predicted as &lt;code&gt;positive&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Again, for a food lover:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When a Hotdog is predicted as Burger, it comes under False Positive&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again, for an animal lover&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When a Cat is predicted as Dog, it comes under False Pos-itive&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Rest you can derive on your own üòâ&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In conclusion I would like to say ‚Ä¶ add ‚Äúly predicted as‚Äù in the middle.&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Aug 2017 00:00:00 +0530</pubDate>
        <link>http://arpitbhayani.me/techie/confusion-matrix-made-simple.html</link>
        <guid isPermaLink="true">http://arpitbhayani.me/techie/confusion-matrix-made-simple.html</guid>
        
        <category>confusion-matrix</category>
        
        <category>data-science</category>
        
        
        <category>techie</category>
        
      </item>
    
      <item>
        <title>How Sleepsort helped me understand concurrency in golang</title>
        <description>&lt;p&gt;For me learning concurrency have always been tricky; Every language has a different way to handle/emulate concurrency, for example, old languages like Java uses &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/essential/concurrency/&quot;&gt;Threads&lt;/a&gt; and modern languages like NodeJS and Python uses something called as &lt;a href=&quot;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/&quot;&gt;event loops&lt;/a&gt; for its asynchronous IO which is there to make IO based things concurrent.&lt;/p&gt;

&lt;p&gt;Recently I started diving deep into concurrency in &lt;a href=&quot;https://golang.org/&quot;&gt;Golang&lt;/a&gt; and I wanted to start with a good &lt;code&gt;&quot;Hello World&quot;&lt;/code&gt; program for it. This time I thought of taking an unconventional way to write my first concurrent program. Going through various examples over the Internet I could not find anything that made it fun. I suddenly recalled &lt;a href=&quot;http://www.geeksforgeeks.org/sleep-sort-king-laziness-sorting-sleeping/&quot;&gt;Sleepsort&lt;/a&gt; and it was the ideal way (fun + new = &amp;lt;3) to learn concurrency.&lt;/p&gt;

&lt;h3 id=&quot;the-concept&quot;&gt;The Concept&lt;/h3&gt;
&lt;p&gt;For people who do not know what Sleep Sort is, the basic goes something like this:
spin &lt;code&gt;n&lt;/code&gt; threads/co-routine (or whatever concurrent element the language has) for &lt;code&gt;n&lt;/code&gt; numbers (to sort) and for each number &lt;code&gt;x&lt;/code&gt; wait for time proportional to &lt;code&gt;x&lt;/code&gt; (lets say &lt;code&gt;x&lt;/code&gt; seconds) and then print/collect the number.&lt;/p&gt;

&lt;h3 id=&quot;implementation-in-go&quot;&gt;Implementation in Go&lt;/h3&gt;
&lt;p&gt;This is a very basic Implementation of Sleep Sort in Golang using Go Routines and &lt;a href=&quot;https://golang.org/pkg/sync/#WaitGroup&quot;&gt;WaitGroup&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// prints a number of sleeping for n seconds&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sleepAndPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;WaitGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Sleeping for time proportional to value&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Millisecond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Printing the value&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Sorts given integer slice using sleep sort&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wg&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;WaitGroup&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Creating wait group that waits of len(numbers) of go routines to finish&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;wg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Spinning a Go routine&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sleepAndPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Waiting for all go routines to finish&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;wg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I have published the code in a &lt;a href=&quot;https://github.com/arpitbbhayani/go-sleep-sort&quot;&gt;Github Repository&lt;/a&gt;. Feel
free to fork and play around with it.&lt;/p&gt;

&lt;h3 id=&quot;what-else-can-you-do-with-it&quot;&gt;What else can you do with it&lt;/h3&gt;
&lt;p&gt;I encourage you to try it out, and trust me it is really fun to learn concurrency through this; Apart from running the basic sleep sort you should also try to do/learn with it. For example,&lt;/p&gt;

&lt;p&gt;Concurrency essentials&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Go Channels for inter go-routine communication&lt;/li&gt;
  &lt;li&gt;Mutex for synchronization making things routine-safe&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also try to&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;collect the elements in a slice, in place of printing&lt;/li&gt;
  &lt;li&gt;make Sleep Sort handle negative numbers too&lt;/li&gt;
  &lt;li&gt;sort the numbers in descending order&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you find any interesting way to learn concurrency or any new use case here, please post a comment below.
I would love to know them.&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Jul 2017 00:00:00 +0530</pubDate>
        <link>http://arpitbhayani.me/techie/how-sleepsort-helped-me-understand-concurrency-in-golang.html</link>
        <guid isPermaLink="true">http://arpitbhayani.me/techie/how-sleepsort-helped-me-understand-concurrency-in-golang.html</guid>
        
        <category>golang</category>
        
        <category>concurrency</category>
        
        
        <category>techie</category>
        
      </item>
    
      <item>
        <title>HACKERRANK game-of-two-stacks Solution</title>
        <description>&lt;p&gt;The correct, optimal and working solution for programming question &lt;a href=&quot;https://www.hackerrank.com/challenges/game-of-two-stacks&quot;&gt;game-of-two-stacks&lt;/a&gt; on hackerrank&lt;/p&gt;

&lt;div class=&quot;ui secondary pointing large menu&quot;&gt;
  &lt;a class=&quot;grey item&quot; data-tab=&quot;problem-statement&quot;&gt;
    Problem Statement
  &lt;/a&gt;
  &lt;a class=&quot;active item grey&quot; data-tab=&quot;solution&quot;&gt;
    Solution
  &lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;ui bottom attached tab&quot; data-tab=&quot;problem-statement&quot;&gt;
    &lt;iframe src=&quot;https://www.hackerrank.com/challenges/game-of-two-stacks&quot; width=&quot;100%&quot; height=&quot;600px&quot; style=&quot;overflow: scroll; border: none;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;div class=&quot;ui bottom attached active tab&quot; data-tab=&quot;solution&quot;&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  Author: Arpit Bhayani&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  http://arpitbhayani.me&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;climits&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;deque&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;list&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;limits&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;set&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stack&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#define ll long long&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#define MIN(a, b) a &amp;lt; b ? a : b&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define MAX(a, b) a &amp;gt; b ? a : b&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%d%d%lld&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/div&gt;
</description>
        <pubDate>Fri, 14 Jul 2017 00:00:00 +0530</pubDate>
        <link>http://arpitbhayani.me/hackerrank/game-of-two-stacks.html</link>
        <guid isPermaLink="true">http://arpitbhayani.me/hackerrank/game-of-two-stacks.html</guid>
        
        <category>competitive-programming</category>
        
        <category>programming</category>
        
        
        <category>hackerrank</category>
        
      </item>
    
      <item>
        <title>Fast and Efficient Pagination in MongoDB</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.mongodb.com/&quot;&gt;MongoDB&lt;/a&gt; is a document based data store and hence pagination is one of the most common use case of it. So when do you paginate the response? The answer is pretty neat; you paginate whenever you want to process result in chunks. Some common scenarios are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Batch processing&lt;/li&gt;
  &lt;li&gt;Showing huge set of results on user interface&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Paginating on client and server side are both really very expensive and should not be considered. Hence pagination is generally handled at database level and databases are optimized for such needs too.&lt;/p&gt;

&lt;p&gt;Below I shall explain you the 2 approaches through which you can easily paginate your MongoDB responses.
Sample Document&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ObjectId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;5936d17263623919cd5165bd&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Lisa Rogers&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;marks&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;approach-1-using-cursorskip-and-cursorlimit&quot;&gt;Approach 1: Using &lt;code&gt;cursor.skip&lt;/code&gt; and &lt;code&gt;cursor.limit&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;MongoDB cursor has two methods that makes paging easy; they are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;cursor.skip()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;cursor.limit()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;skip(n)&lt;/code&gt; will skip &lt;code&gt;n&lt;/code&gt; documents from the cursor while &lt;code&gt;limit(n)&lt;/code&gt; will cap the number of documents to be returned from the cursor. Thus combination of two naturally paginates the response.&lt;/p&gt;

&lt;p&gt;In Mongo Shell your pagination code looks something like this&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Page 1&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;students&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Page 2&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;students&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Page 3&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;students&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;.find()&lt;/code&gt; will return a cursor pointing to all documents of the collection and then for each page we skip some and consume some. Through continuous skip and limit we get pagination in MongoDB.&lt;/p&gt;

&lt;p&gt;I am fond of Python and hence here is a small trivial function to implement pagination:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;skiplimit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;returns a set of documents belonging to page number `page_num`&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        where size of each page is `page_size`.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Calculate number of documents to skip&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;skips&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Skip and limit&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;students&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skips&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Return documents&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;approach-2-using-_id-and-limit&quot;&gt;Approach 2: Using &lt;code&gt;_id&lt;/code&gt; and &lt;code&gt;limit&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;This approach will make effective use of default index on &lt;code&gt;_id&lt;/code&gt; and nature of &lt;code&gt;ObjectId&lt;/code&gt;.
I bet you didn‚Äôt know that a &lt;a href=&quot;https://docs.mongodb.com/manual/reference/bson-types/#objectid&quot;&gt;Mongodb ObjectId&lt;/a&gt; is a 12 byte structure containing&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a 4-byte value representing the seconds since the Unix epoch,&lt;/li&gt;
  &lt;li&gt;a 3-byte machine identifier,&lt;/li&gt;
  &lt;li&gt;a 2-byte process id, and&lt;/li&gt;
  &lt;li&gt;a 3-byte counter, starting with a random value.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even I didn‚Äôt until I read the &lt;a href=&quot;https://docs.mongodb.com/manual/reference/bson-types/#objectid&quot;&gt;documentation&lt;/a&gt;. Apart from its structure there is one very interesting property of ObjectId; which is - &lt;em&gt;ObjectId has natural ordering&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What does it mean? It simplifies that we can apply all the &lt;em&gt;less-than-s&lt;/em&gt; and all the &lt;em&gt;greater-than-s you&lt;/em&gt; want to it. If you don‚Äôt believe me, open Mongo shell and execute following set of commands&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ObjectId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;5936d49863623919cd56f52d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;ObjectId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;5936d49863623919cd56f52e&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ObjectId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;5936d49863623919cd56f52d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;ObjectId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;5936d49863623919cd56f52a&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Using this property of ObjectId and also taking into consideration the fact that &lt;code&gt;_id&lt;/code&gt; is always indexed, we can devise following approach for pagination:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Fetch a page of documents from database&lt;/li&gt;
  &lt;li&gt;Get the document id of the last document of the page&lt;/li&gt;
  &lt;li&gt;Retrieve documents greater than that id&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In Mongo Shell your pagination code looks something like this&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Page 1&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;students&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Page 2&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;last_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logic&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;last_id&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;students&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;_id&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;$gt&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;last_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Page 3&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;last_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logic&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;last_id&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;students&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;_id&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;$gt&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;last_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Again, I am fond of Python and here is the Python implementation of this approach.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;idlimit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Function returns `page_size` number of documents after last_id&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        and the new last_id.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_id&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# When it is first page&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;students&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;students&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;_id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;$gt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}})&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Get the data      &lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;# No documents left&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Since documents are naturally ordered with _id, last document will&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# have max id.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;last_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;_id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Return data and last_id&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_id&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you are using a field other than &lt;code&gt;_id&lt;/code&gt; for offset, make sure the field is indexed and properly ordered else the performance will suffer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;closing-remarks&quot;&gt;Closing Remarks&lt;/h2&gt;

&lt;p&gt;Both of the above approaches are valid and correct. But as we know, in field of Computer Science, whenever there are multiple options to achieve something, one always outperforms the other. Same is the situation here as well.&lt;/p&gt;

&lt;p&gt;Turns out, there is a severe problem with skip function. I have tried to jot it down in &lt;a href=&quot;/techie/mongodb-cursor-skip-is-slow.html&quot;&gt;this blog post&lt;/a&gt;. Because of which second approach has advantage over first. But that is not it; I wrote a simple &lt;a href=&quot;https://github.com/arpitbbhayani/mongo-pagination-benchmark&quot;&gt;python code&lt;/a&gt; to benchmark the two approaches for various combinations and it turns out &lt;code&gt;skip&lt;/code&gt; performs better in some case. The results are compiled into &lt;a href=&quot;/techie/benchmark-and-compare-pagination-approach-in-mongodb.html&quot;&gt;this blog post&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Jun 2017 00:00:00 +0530</pubDate>
        <link>http://arpitbhayani.me/techie/fast-and-efficient-pagination-in-mongodb.html</link>
        <guid isPermaLink="true">http://arpitbhayani.me/techie/fast-and-efficient-pagination-in-mongodb.html</guid>
        
        <category>mongodb</category>
        
        <category>scalability</category>
        
        
        <category>techie</category>
        
      </item>
    
      <item>
        <title>Why MongoDB's cursor.skip() is slow?</title>
        <description>&lt;p&gt;MongoDB‚Äôs cursor object has a method called &lt;code&gt;skip&lt;/code&gt;, which as per &lt;a href=&quot;https://docs.mongodb.com/manual/reference/method/cursor.skip/#definition&quot;&gt;documentation and definition&lt;/a&gt;, controls where MongoDB begins returning results. Thus in combination with function &lt;a href=&quot;https://docs.mongodb.com/manual/reference/method/cursor.limit/&quot;&gt;limit&lt;/a&gt;, one can easily have paginated results.&lt;/p&gt;

&lt;p&gt;I have written a blog post on &lt;a href=&quot;/techie/fast-and-efficient-pagination-in-mongodb.html&quot;&gt;how you can have Fast and Efficient Pagination in MongoDB&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But while going through the documentation of skip, there is something interesting to notice. There is a small warning in &lt;a href=&quot;https://docs.mongodb.com/manual/reference/method/cursor.skip/#behavior&quot;&gt;MongoDB documentation&lt;/a&gt;, that states&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The &lt;code&gt;cursor.skip()&lt;/code&gt; method is often expensive because it requires the server to walk from the beginning of the collection or index to get the offset or skip position before beginning to return results. As the offset (e.g. &lt;code&gt;pageNumber&lt;/code&gt; above) increases, &lt;code&gt;cursor.skip()&lt;/code&gt; will become slower and more CPU intensive. With larger collections, &lt;code&gt;cursor.skip()&lt;/code&gt; may become IO bound.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In short, MongoDB has to iterate over documents to skip them. Thus when collection or result set is huge and you need to skip documents for pagination, the call to &lt;code&gt;cursor.skip&lt;/code&gt; will be expensive. While going through the source code of &lt;code&gt;skip&lt;/code&gt; I found out that it does not use any index and hence gets slower when result set increases in size.&lt;/p&gt;

&lt;p&gt;This also implies that if you use &lt;code&gt;skip&lt;/code&gt;  then the ‚Äúskipping speed‚Äù will not improve even if you index the field.&lt;/p&gt;

&lt;p&gt;But what if the size of result set is small? is calling &lt;code&gt;skip&lt;/code&gt; still a terrible idea?
If skip was so terrible, then MongoDB team and community must had taken that decision long back. But they haven‚Äôt ‚Ä¶ why?&lt;/p&gt;

&lt;p&gt;Because it is very efficient and fast for smaller result set. I have taken this opportunity to &lt;a href=&quot;/techie/benchmark-and-compare-pagination-approach-in-mongodb.html&quot;&gt;benchmark and compare&lt;/a&gt; the &lt;a href=&quot;/techie/fast-and-efficient-pagination-in-mongodb.html&quot;&gt;two approach for pagination&lt;/a&gt; and there I found out skip and limit based pagination works well for smaller result sets.&lt;/p&gt;

&lt;p&gt;In conclusion, skip is not as bad one might think. But you must understand your use case well so as to make an informed decision.&lt;/p&gt;
</description>
        <pubDate>Sun, 04 Jun 2017 00:00:00 +0530</pubDate>
        <link>http://arpitbhayani.me/techie/mongodb-cursor-skip-is-slow.html</link>
        <guid isPermaLink="true">http://arpitbhayani.me/techie/mongodb-cursor-skip-is-slow.html</guid>
        
        <category>mongodb</category>
        
        <category>scalability</category>
        
        
        <category>techie</category>
        
      </item>
    
      <item>
        <title>Benchmark and compare the two approaches to paginate in MongoDB</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.mongodb.com/&quot;&gt;MongoDB&lt;/a&gt; is a document based data store and hence pagination is one of the most common use case of it. So when do you paginate the response? The answer is pretty neat; you paginate whenever you want to process result in chunks. Some common scenarios are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Batch processing&lt;/li&gt;
  &lt;li&gt;Showing huge set of results on user interface&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are multiple approaches through which you can &lt;a href=&quot;/techie/fast-and-efficient-pagination-in-mongodb.html&quot;&gt;paginate your result set in MongoDB&lt;/a&gt;. This blog post is dedicated for results of benchmark of two approaches and its analysis, so here we go ‚Ä¶&lt;/p&gt;

&lt;p&gt;Benchmark has been done over a non-indexed collection. Each document of the collection looks something like this&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ObjectId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;5936d17263623919cd5165bd&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Lisa Rogers&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;marks&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;All records of a collection are fetched page-wise. Size of each page is fixed during fetch of the collection. Each page is fetched &lt;em&gt;3&lt;/em&gt; times and average of, time to fetch one ‚Äúpage‚Äù, 3 is recorded.&lt;/p&gt;

&lt;p&gt;Following image shows the how two approach fares against each other.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;ui huge centered stylish image&quot; src=&quot;/static/images/mongodb-pagination/mongo-pagination-benchmark-results.png&quot; alt=&quot;Benchmark results&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A key observation to note is that, till 500-600 count, both the approaches are comparable, but once it crosses that threshold, there is sudden rise in response time for &lt;code&gt;skip&lt;/code&gt; and &lt;code&gt;limit&lt;/code&gt; approach than other. The approach using &lt;code&gt;_id&lt;/code&gt; and &lt;code&gt;limit&lt;/code&gt; almost gives constant performance and is independent of size of the result set.&lt;/p&gt;

&lt;p&gt;I tried running this test on different machines with different disks but results were similar. I think diving deep in MongoDB‚Äôs database drivier will yield better information about this behavior. You could see some spikes in the response times, that are because of Disk Contention.&lt;/p&gt;

&lt;p&gt;In short:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;For huge result set, paginating using &lt;code&gt;_id&lt;/code&gt; and &lt;code&gt;limit&lt;/code&gt; is far better than using &lt;code&gt;skip&lt;/code&gt; and &lt;code&gt;limit&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;For smaller result set, it does not matter, but prefer skip and limit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An interesting thing I observed is that after page size crosses 100, the gap between the two approach reduces to some extent. I am yet to perform detailed benchmark on that as such use-case (where page-size is more than 100) is pretty rare in practical applications.&lt;/p&gt;

&lt;p&gt;You can find the Python code used for this benchmark &lt;a href=&quot;https://github.com/arpitbbhayani/mongo-pagination-benchmark&quot;&gt;here&lt;/a&gt;. If you have any suggestion or improvement, do let me know.&lt;/p&gt;
</description>
        <pubDate>Fri, 02 Jun 2017 00:00:00 +0530</pubDate>
        <link>http://arpitbhayani.me/techie/benchmark-and-compare-pagination-approach-in-mongodb.html</link>
        <guid isPermaLink="true">http://arpitbhayani.me/techie/benchmark-and-compare-pagination-approach-in-mongodb.html</guid>
        
        <category>mongodb</category>
        
        <category>scalability</category>
        
        
        <category>techie</category>
        
      </item>
    
      <item>
        <title>Why Freshers Are Awesome</title>
        <description>&lt;p&gt;Freshers is the term we all have been (or will be) associated with, generally referring to someone who just graduated and is fresh out of college. Every organization hires some freshers, but why? Why is company paying someone who has no experience and no exposure? Obviously the giants are not nuts to hire someone they don‚Äôt see any value. Hence I tried to compile my thoughts on ‚ÄúWhy Freshers Are Awesome?‚Äù. Before you think of giving this a read I would request you to please make a note that these are my opinions and I am not always correct üòâ&lt;/p&gt;

&lt;h2 id=&quot;new-wave-of-freshness&quot;&gt;New wave of freshness&lt;/h2&gt;
&lt;p&gt;Freshers bring in new wave of freshness to an organization that might have lost its luster and peppiness. This new wave brings some ‚Äúmodern‚Äù fashion sense, different hair and beard styles, latest trends and of course ‚Äú&lt;em&gt;THE SWAG&lt;/em&gt;‚Äù (as the youngs calls it). This wave is essential for any organization to keep its culture up-to-date, lively, spicy and upbeat.&lt;/p&gt;

&lt;h2 id=&quot;unbiased-perspective-to-problem-solving&quot;&gt;Unbiased Perspective to Problem Solving&lt;/h2&gt;
&lt;p&gt;Seasoned employees are used to facing problems and solving it with some preferred approach. But when the same problem is given to a person that has never seen it before, he/she might give you some suggestions and hints that could result in solving the problem far more efficiently. That is why every team has some freshers and their opinions does matter as they might have suggestions that are relatively unheard of and could help tackle problem with some different unconventional way.&lt;/p&gt;

&lt;h2 id=&quot;bridging-the-gap&quot;&gt;Bridging the Gap&lt;/h2&gt;
&lt;p&gt;Every hour a new library, utility, product, tool or language is popping up and for seasoned employees it is very hard to stay updated with it. Because of this most seasoned employees are master a set of tools and technologies and they refrain from evaluating and adopting new tech. On the other hand freshers always try to keep themselves updated with latest tech and because of their huge motivation level they keep on learning new things. Freshers bring with them new technologies and experiences and thus bridge the technology gap.&lt;/p&gt;

&lt;h2 id=&quot;the-go-to-ones&quot;&gt;The Go-To Ones&lt;/h2&gt;
&lt;p&gt;When a project is ‚Äúdead‚Äù and everyone refuses to work on it because it is either too simple or mundane or just that no one wants to do it, it is given to a fresher as a ‚Äúlearning‚Äù task and thus they bring it to ‚Äúlife‚Äù. When seniors don‚Äôt feel like working on a easy module they ask for some freshers to do it. When system designers (principal architect) wants to do some proof-of-concept of their theory/approach they ask some freshers to code it. Thus freshers become the most important ‚Äúgo-to‚Äù guys of an organization.&lt;/p&gt;

&lt;h2 id=&quot;the-motivated-unit&quot;&gt;The Motivated Unit&lt;/h2&gt;
&lt;p&gt;With their zeal to learn and grow, freshers are probably the only ‚Äúmotivated unit‚Äù of an organization. The seniors and seasoned employee have seen and have been through enough in their work and personal life that they just work for sake of money and keeping up with all the bills. Freshers single handedly bring the overall motivation level of the company up and unknowingly ensures that things are moving at a brisk pace.&lt;/p&gt;

&lt;h2 id=&quot;covering-up&quot;&gt;Covering up&lt;/h2&gt;
&lt;p&gt;This article may make you feel like seniors and experiences people are lazy and jerks; but that is not the case. Its just that they focus more on solving ‚Äúbigger‚Äù problems and leave mediocre ones and implementations to freshers and juniors. Most of the seniors have a family to look after and thus have to juggle between so many things that they cannot give their 100% at work.&lt;/p&gt;

&lt;p&gt;PS: I am a Senior Backend Engineer.&lt;/p&gt;
</description>
        <pubDate>Sat, 20 May 2017 00:00:00 +0530</pubDate>
        <link>http://arpitbhayani.me/blog/why-freshers-are-awesome.html</link>
        <guid isPermaLink="true">http://arpitbhayani.me/blog/why-freshers-are-awesome.html</guid>
        
        <category>organization</category>
        
        <category>people</category>
        
        <category>startup</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Beware of - Which indian celebrity do you look like?</title>
        <description>&lt;p&gt;For last 3 odd days my &lt;a href=&quot;https://facebook.com&quot;&gt;Facebook&lt;/a&gt; Wall is flooded with post that looks something like above where almost every single friend of mine has posted ‚ÄúWhich celebrity he looked like‚Äù.&lt;/p&gt;

&lt;p&gt;Initially I was not inclined to try this and for me all such things are mumbo jumbo. But then as this ritual was growing and was getting accepted at a huge pace, I thought, ‚ÄúWhy Not?‚Äù; and I gave it a shot.&lt;/p&gt;

&lt;p&gt;When I clicked on the link I was redirected to the page full of advertisements; and then I clicked the link that asked me to ‚ÄúLogin via Facebook‚Äù. It redirected me to an ‚ÄúOAuth Dialog‚Äù and asked me for some permission. The set of permissions it asked me were insane.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;ui centered medium image&quot; src=&quot;/static/images/indian-celebrity/oauth-dialog.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I wondered ‚ÄúWhy an app like this needs to access my ‚ÄúTimeline post‚Äô?‚Äù. Hence instead of clicking ‚ÄúContinue‚Äù but I clicked ‚ÄúEdit this‚Äù and edited the set of information that Facebook should share with this app about me.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;ui centered medium image&quot; src=&quot;/static/images/indian-celebrity/permissions-asked.jpg&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;why-did-i-do-this&quot;&gt;Why did I do this?&lt;/h2&gt;
&lt;p&gt;The application that asks you to login via Facebook, can ask any kind of information from Facebook about you. But Facebook before giving away all information asked to that app, first consults you and asks for your permission, and gives you a chance to edit it. Most of the users do not bother to edit it; and because of which sites like &lt;a href=&quot;http://catfly.in/&quot;&gt;Cat Fly Quizzes&lt;/a&gt; gets all of your information, with your consent.&lt;/p&gt;

&lt;h2 id=&quot;what-might-happen-when-such-app-gets-my-information&quot;&gt;What might happen when such app gets my information&lt;/h2&gt;
&lt;p&gt;Such app/websites may:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Sell this data to some fraudulent entity which engages in sending spams or scams.&lt;/li&gt;
  &lt;li&gt;Create fake profiles on different platforms and use it for illegal activities.&lt;/li&gt;
  &lt;li&gt;Misuse your photos and data to blackmail someone.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are tonnes of scarier scenarios but I am avoiding writing it. Just remember nothing on Internet you share is safe. Don‚Äôt trust something just because your friend trusts it.&lt;/p&gt;

&lt;h2 id=&quot;can-i-revoke-the-permission-that-i-granted&quot;&gt;Can I revoke the permission that I granted?&lt;/h2&gt;
&lt;p&gt;YES. A big YES!&lt;/p&gt;

&lt;p&gt;You can revoke the permission that you granted to an app by going to your ‚ÄúSettings‚Äù in your Facebook account. Here is a small video I made that would guide you to revoke the permission.&lt;/p&gt;

&lt;div class=&quot;ui center aligned basic segment&quot;&gt;
  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/6SjlXpUNrBM&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Revoking the permission will prevent such apps from getting your data again.&lt;/p&gt;

&lt;h2 id=&quot;things-you-should-always-remember&quot;&gt;Things you should always remember&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Whenever you login via Facebook or Google or any such site, please read the list of information that it will share with the app on your behalf.&lt;/li&gt;
  &lt;li&gt;If you dont want to share some or all of the information, you can change it from the OAuth dialog.&lt;/li&gt;
  &lt;li&gt;If you have already granted some app the permissions, you can anytime revoke them.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;It is a dangerous world out there on the internet, stay safe!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 08 May 2017 00:00:00 +0530</pubDate>
        <link>http://arpitbhayani.me/blog/beware-of-which-indian-celebrity-do-you-look-like.html</link>
        <guid isPermaLink="true">http://arpitbhayani.me/blog/beware-of-which-indian-celebrity-do-you-look-like.html</guid>
        
        <category>social-media</category>
        
        <category>security</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Tripod - Fast in-memory prefix search in Go</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://github.com/arpitbbhayani/tripod&quot;&gt;Tripod&lt;/a&gt; provides fast and optimal search-by-prefix utilities in Go. For now it uses an in-memory trie data structure to store all the string on which you want to do a prefix search. There two implementations: one that store byte splices and other that store rune splices. The primary difference between the two is the that the later one stores data rune by rune (which makes a logical sense), so even if you have UTF-8 characters, the rune based implementation will take care of it. On the other hand the byte splice based implementation is optimized for ascii string, where one byte is enough to store a character.&lt;/p&gt;

&lt;h2 id=&quot;highlights&quot;&gt;Highlights&lt;/h2&gt;
&lt;p&gt;PrefixStoreByteTrie&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;0 bytes of garbage allocation for &lt;code&gt;Put&lt;/code&gt; and &lt;code&gt;Exists&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;minimal and predictable allocations &lt;code&gt;(3 * (numOfElementsRetrieved) + 2)&lt;/code&gt; for
&lt;code&gt;PrefixSearch&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PrefixStoreRuneTrie&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;0 bytes of garbage allocation for &lt;code&gt;Put&lt;/code&gt; and &lt;code&gt;Exists&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;minimal and predictable allocations &lt;code&gt;(3 * (numOfElementsRetrieved) + 2)&lt;/code&gt; for
&lt;code&gt;PrefixSearch&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;can safely store UTF-8 characters&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;prefix-stores&quot;&gt;Prefix Stores&lt;/h2&gt;
&lt;p&gt;PrefixStore is where you will store your prefix. You will call &lt;code&gt;Put&lt;/code&gt;, &lt;code&gt;Exists&lt;/code&gt;
and &lt;code&gt;PrefixSearch&lt;/code&gt; on its instance. There are several type of implementations
available for this. Each implementation of Prefix Store has some tailor-made
optimization on method calls for type of data it can store. Following are the
types available&lt;/p&gt;

&lt;h3 id=&quot;prefixstorebytetrie&quot;&gt;PrefixStoreByteTrie&lt;/h3&gt;
&lt;p&gt;This PrefixStore is implemented via an in-memory trie capable of storing only
&lt;code&gt;[]byte&lt;/code&gt;. This should be used when you know that the data you would put in only
has ASCII characters. No one is stopping you from putting any kind of &lt;code&gt;[]byte&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;prefixstorerunetrie&quot;&gt;PrefixStoreRuneTrie&lt;/h3&gt;
&lt;p&gt;This PrefixStore is implemented via an in-memory trie capable of storing only
&lt;code&gt;[]rune&lt;/code&gt;. This is useful when you want to store data that might have
UTF-8 characters.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;go get github.com/arpitbbhayani/tripod&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;quickstart-hello-world&quot;&gt;Quickstart: Hello, World!&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&amp;quot;github.com/arpitbbhayani/tripod&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tripod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CreatePrefixStoreByteTrie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;go&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;is&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;good&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PrefixSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;g&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Front&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.([]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;documentation&quot;&gt;Documentation&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://godoc.org/github.com/arpitbbhayani/tripod&quot;&gt;http://godoc.org/github.com/arpitbbhayani/tripod&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;running-tests-and-benchmarks&quot;&gt;Running Tests and Benchmarks&lt;/h2&gt;

&lt;h3 id=&quot;running-tests&quot;&gt;Running Tests&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; tests
go &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;running-benchmarks&quot;&gt;Running Benchmarks&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; benchmarks
go &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; -bench&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;. -benchmem&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;benchmarks&quot;&gt;Benchmarks&lt;/h2&gt;

&lt;h3 id=&quot;conventions&quot;&gt;Conventions&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;BenchmarkByteTriePut8&lt;/code&gt; means Benchmarking on a PrefixStoreByteTrie on
 method &lt;code&gt;Put&lt;/code&gt; where each key is of size 8 bytes/runes.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;BenchmarkByteTriePrefixSearch8_10&lt;/code&gt; means Benchmarking on a
 PrefixStoreByteTrie on method &lt;code&gt;PrefixSearch&lt;/code&gt; where 10 elements are
 retrieved each of size 8 bytes/runes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;results&quot;&gt;Results&lt;/h3&gt;
&lt;h4 id=&quot;prefixstorebytetrie-1&quot;&gt;PrefixStoreByteTrie&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;BenchmarkByteTriePut32-4                         3000000               395 ns/op               0 B/op          0 allocs/op
BenchmarkByteTriePut128-4                        1000000              1660 ns/op               0 B/op          0 allocs/op
BenchmarkByteTrieExists32-4                      3000000               454 ns/op               0 B/op          0 allocs/op
BenchmarkByteTriePrefixSearch32_50-4               10000            224612 ns/op            5776 B/op        152 allocs/op
BenchmarkByteTriePrefixSearch128_50-4               2000            926553 ns/op           10576 B/op        152 allocs/op
BenchmarkByteTriePrefixSearch32_200-4               2000            921052 ns/op           22576 B/op        602 allocs/op
BenchmarkByteTriePrefixSearch128_200-4               500           3530201 ns/op           41776 B/op        602 allocs/op
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;prefixstorerunetrie-1&quot;&gt;PrefixStoreRuneTrie&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;BenchmarkRuneTriePut32-4                         3000000               473 ns/op               0 B/op          0 allocs/op
BenchmarkRuneTriePut128-4                        1000000              2038 ns/op               0 B/op          0 allocs/op
BenchmarkRuneTrieExists32-4                      3000000               454 ns/op               0 B/op          0 allocs/op
BenchmarkRuneTrieExists128-4                     1000000              1922 ns/op               0 B/op          0 allocs/op
BenchmarkRuneTriePrefixSearch32_50-4               10000            225612 ns/op           10960 B/op        152 allocs/op
BenchmarkRuneTriePrefixSearch128_50-4               2000            885550 ns/op           30160 B/op        152 allocs/op
BenchmarkRuneTriePrefixSearch32_200-4               2000            742042 ns/op           42160 B/op        602 allocs/op
BenchmarkRuneTriePrefixSearch128_200-4               500           3248185 ns/op          118960 B/op        602 allocs/op
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;contribution&quot;&gt;Contribution&lt;/h2&gt;
&lt;p&gt;In case you loved this utility and have a great feature idea, then feel free to
contribute . The complete utility is written in Go. So for contributing all you
need to have is working knowledge of Go.&lt;/p&gt;

&lt;h2 id=&quot;issues&quot;&gt;Issues&lt;/h2&gt;
&lt;p&gt;Please report any glitch, bug, error or an unhandled exception. Feel free
to &lt;a href=&quot;https://github.com/arpitbbhayani/tripod/issues/new&quot;&gt;create one&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 25 Apr 2017 00:00:00 +0530</pubDate>
        <link>http://arpitbhayani.me/projects/tripod-fast-in-memory-prefix-search-in-go.html</link>
        <guid isPermaLink="true">http://arpitbhayani.me/projects/tripod-fast-in-memory-prefix-search-in-go.html</guid>
        
        <category>trie</category>
        
        <category>golang</category>
        
        <category>search</category>
        
        
        <category>projects</category>
        
      </item>
    
      <item>
        <title>9 - Revenge</title>
        <description>&lt;p&gt;With a wicked smile Kipo came out of the bathroom, full of confidence and strength, and started walking towards the war zone. For winning this war he needs to understand his ‚Äúenemy‚Äù a little better. As he was in the passage he saw Nick coming towards him. Seeing Kipo, Nick rushed towards him and said ‚ÄúWhere have you been? I searched for you everywhere!‚Äù.&lt;/p&gt;

&lt;p&gt;‚ÄúThat is not important. Tell me what is the name of that huge-potato-porker-lard-ass?‚Äù asked Kipo.&lt;/p&gt;

&lt;p&gt;‚ÄúWho?‚Äù asked Nick with a very confused expression. But as soon as he asked this, he realized whom Kipo was referring to, and he continued ‚ÄúHis name is Roy, and the thin guy besides him is Bob; He is his sidekick‚Äù.&lt;/p&gt;

&lt;p&gt;Kipo had another question ready in his mind and as Nick finished telling, Kipo asked ‚ÄúTell me one thing that R..oy is scared of.‚Äù. Nick with full confidence answered ‚ÄúLIZARDS! Everyone in the school know this. There is is very funny incident ‚Ä¶‚Ä¶‚Äù.&lt;/p&gt;

&lt;p&gt;‚ÄúA ‚Ä¶ a ‚Ä¶ a‚Ä¶. a ‚Ä¶.‚Äù Kipo stopped him and said ‚Äúlater ‚Ä¶ later ‚Ä¶. We don‚Äôt have time, please go to the class room and get me my bag. I will wait in the bathroom.‚Äù&lt;/p&gt;

&lt;p&gt;Nick rushed to the classroom, grabbed Kipo‚Äôs bag and came back to the bathroom. Kipo just like a mad scientist wanting to create Frankenstein, started tearing pages and making something. After some cuts and folds he showed what he created to Nick and said ‚ÄúDoes this look like a lizard?‚Äù. Nick was surprised to see how quickly Kipo managed to create a lizard from just a mere piece of paper. He replied ‚ÄúYes it does look like a lizard! If you color it, it would be better‚Äù.&lt;/p&gt;

&lt;p&gt;Kipo had already though of painting it, so he took out the new oil paint colors, he had brought with him, from his bag and started painting it. Once he finished it, he showed it to Nick,&lt;/p&gt;

&lt;p&gt;Nick was astounded to see this scarily painted origami lizard. It looked scary real!&lt;/p&gt;

&lt;p&gt;They went to the classroom, everyone started giving Kipo a look. He did not like it but he knew that if his plan worked, tables will be turn. Kipo took the lead and went behind Roy, took out the fake lizard and threw it onto him. This scary little lizard scared the bejesus out of him and he screamed and ran away; and with him ran Bob, his sidekick.&lt;/p&gt;

&lt;p&gt;Everyone in the class started laughing and clapping for Kipo, which made him feel special. Kipo and Nick then took back their seats; and as they sat, a pretty looking lady came into the class and said ‚ÄúGood Morning Students!‚Äù&lt;/p&gt;

&lt;p&gt;What would happen when Roy and Bob returns? A fight?&lt;/p&gt;

&lt;p&gt;Stay Tuned&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Mar 2017 00:00:00 +0530</pubDate>
        <link>http://arpitbhayani.me/mrcup/9-revenge.html</link>
        <guid isPermaLink="true">http://arpitbhayani.me/mrcup/9-revenge.html</guid>
        
        <category>mrcup</category>
        
        <category>story 9</category>
        
        
        <category>mrcup</category>
        
      </item>
    
  </channel>
</rss>
