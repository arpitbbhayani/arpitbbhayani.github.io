<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Arpit Bhayani | Blog of a software engineer</title>
    <description>An avid programmer, passionate about engineering and building products. Knows a bit of everything.</description>
    <link>https://arpitbhayani.me/</link>
    <atom:link href="https://arpitbhayani.me/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 22 Sep 2018 09:28:56 +0530</pubDate>
    <lastBuildDate>Sat, 22 Sep 2018 09:28:56 +0530</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>Building the Potterverse search engine</title>
        <description>&lt;p&gt;After deciding on the &lt;a href=&quot;/blog/tech-stack-for-potterverse.html&quot;&gt;tech stack&lt;/a&gt;
for &lt;a href=&quot;http://potterverse.arpitbhayani.me/&quot;&gt;Potterverse&lt;/a&gt;, it was time for me to
start building something nice. The process started with creating the first design, downloading
and processing the dataset, extracting the required information and dumping everything into
elasticsearch.&lt;/p&gt;

&lt;h3 id=&quot;the-first-design&quot;&gt;The first design&lt;/h3&gt;
&lt;p&gt;The very first product design I had in mind looked like this&lt;/p&gt;

&lt;div class=&quot;ui hidden divider&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;ui image&quot;&gt;
    &lt;img src=&quot;/static/images/potterverse/design-001.jpg&quot; /&gt;
&lt;/div&gt;
&lt;div class=&quot;ui hidden divider&quot;&gt;&lt;/div&gt;

&lt;p&gt;The left half of the page contains the search results for the given term
and right half contains a small preview of the page that is selected/tapped. If the user
taps on the title of the result, it opens the source page in a new tab. Each item in the result
contains some information about the page, like &lt;code&gt;Title&lt;/code&gt;, &lt;code&gt;SmallExcerpt&lt;/code&gt;, &lt;code&gt;SourceLink&lt;/code&gt;, and
&lt;code&gt;ShortPreview&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The short preview of the page will help the user get a snippet of information about the
entity that is tapped. After reading the snippet, if the user want to read more from
the page, there is a &lt;code&gt;Read More&lt;/code&gt; link which would open the source page in new tab.&lt;/p&gt;

&lt;p&gt;The result page also shows the time taken for the search to perform and approximate number of
relevant documents for the given search query.&lt;/p&gt;

&lt;h3 id=&quot;downloading-and-processing-the-dataset&quot;&gt;Downloading and processing the dataset&lt;/h3&gt;
&lt;p&gt;The very basic version of Potterverse is built on top of the
&lt;a href=&quot;http://harrypotter.wikia.com/wiki/Help:Database_download&quot;&gt;Harry Potter Wikia Dataset&lt;/a&gt; from Wikia.
The dataset is very similar to Wikipedia dataset and is also in &lt;a href=&quot;https://www.mediawiki.org/wiki/MediaWiki&quot;&gt;Mediawiki format&lt;/a&gt;
which makes my life much simpler as I have already written a &lt;a href=&quot;https://en.wikipedia.org/wiki/Simple_API_for_XML&quot;&gt;SAX Parser&lt;/a&gt; for my &lt;a href=&quot;http://github.com/arpitbbhayani/wikise&quot;&gt;very first search engine&lt;/a&gt; built on top of Wikipedia data.&lt;/p&gt;

&lt;p&gt;With slight modifications in the code, I converted the entire dataset in
&lt;a href=&quot;http://www.json.org/&quot;&gt;JSON format&lt;/a&gt; which is loved by both Python and Elasticsearch. Along with extracting
basic information like &lt;code&gt;DocumentID&lt;/code&gt;, &lt;code&gt;Title&lt;/code&gt;, &lt;code&gt;Body&lt;/code&gt; the parser also extracts &lt;code&gt;Infobox&lt;/code&gt;, &lt;code&gt;Categories&lt;/code&gt;,
&lt;code&gt;InternalLinks&lt;/code&gt;, &lt;code&gt;ExternalLinks&lt;/code&gt; explicitly. The entire detail is JSONed and dumped in files, one
file per document.&lt;/p&gt;

&lt;p&gt;The dataset contains tonnes of documents that are not significant, like &lt;code&gt;Talk&lt;/code&gt; documents, &lt;code&gt;File&lt;/code&gt; documents,
etc. which are filtered out before processing. After filtering we are left with around &lt;strong&gt;13350&lt;/strong&gt; documents,
and this now becomes the very first corpus on top of which the first version of Potterverse
search engine is built.&lt;/p&gt;

&lt;h3 id=&quot;indexing-the-data-in-elasticsearch&quot;&gt;Indexing the data in Elasticsearch&lt;/h3&gt;
&lt;p&gt;The list of information that si required to show on interface includes&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Title&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;SourceLink&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ShortExcerpt&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ShortPreview&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since Elasticsearch should behold everything required on the interface, hence we need to compute,
process and dump information beforehand. Let’s see what we have and what we don;t&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Title&lt;/code&gt; is present in dump file as is.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;SourceLink&lt;/code&gt; is base url of Wikia with &lt;code&gt;Title&lt;/code&gt; appended to it.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ShortExcerpt&lt;/code&gt; is first 256 characters from &lt;code&gt;Body&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ShortPreview&lt;/code&gt; is first 3000 characters from &lt;code&gt;Body&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So a sample document dumped in Elasticsearch index will look something like this&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;Title&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Harry Potter&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;Body&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Harry James[57] Potter (b. 31 July, 1980[1]) was a half-blood[2] ... ...&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;Excerpt&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Harry James[57] Potter (b. 31 July, 1980[1]) was a half-blood[2] ... ...&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;SourceLink&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://harrypotter.wikia.com/wiki/Harry Potter&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here &lt;code&gt;Title&lt;/code&gt; is the title of the document picked as is from the dump file and &lt;code&gt;Excerpt&lt;/code&gt; is the
first 3000 characters from &lt;code&gt;Body&lt;/code&gt; and the &lt;code&gt;Body&lt;/code&gt; itself. I persist &lt;code&gt;Excerpt&lt;/code&gt; so that, while
querying the elasticsearch I need not fetch the entire &lt;code&gt;Body&lt;/code&gt; of the page, instead I can only
select &lt;code&gt;Excerpt&lt;/code&gt;; inturn saving a lot of network bandwidth.&lt;/p&gt;

&lt;p&gt;The mapping for the index is raw and default, with default analyzer, default tokenizers and
default settings, in short no customizations.&lt;/p&gt;

&lt;h3 id=&quot;querying-the-data&quot;&gt;Querying the data&lt;/h3&gt;
&lt;p&gt;For the first version of search engine, the query to be fired on Elasticsearch is a very basic
one with boost given to &lt;code&gt;Title&lt;/code&gt; match none given to &lt;code&gt;Body&lt;/code&gt;. Fuzziness is set
to &lt;code&gt;AUTO&lt;/code&gt; for both fields, which ensures that the search engine is also Typo Tolerant.&lt;/p&gt;

&lt;p&gt;For the query &lt;code&gt;Harry Potter&lt;/code&gt; elasticsearch query that is fired looks like this&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;function_score&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;bool&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;quot;should&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;quot;match&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;quot;Title&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;nt&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Harry Potter&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;nt&quot;&gt;&amp;quot;boost&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;quot;match&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;quot;Body&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;nt&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Harry Potter&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Above query when fired on Elasticsearch returns nice results; which are okay
to be driving the first version of search engine. The default
&lt;a href=&quot;https://en.wikipedia.org/wiki/Tf%E2%80%93idf&quot;&gt;tf-idf&lt;/a&gt; scoring
works well and results are quite relevant.&lt;/p&gt;

&lt;h3 id=&quot;in-conclusion&quot;&gt;In conclusion&lt;/h3&gt;
&lt;p&gt;With very minimal efforts this is how I spun up a nice looking Harry Potter based search
engine. It was not difficult and took very little time for entire setup. As and when
some modifications will be made to Potterverse, a blog will be published detailing
the changes, improvements and results that have been made and achieved.&lt;/p&gt;

&lt;p&gt;Stay tuned!&lt;/p&gt;

&lt;p&gt;PS: In case you have any suggestions about &lt;a href=&quot;http://potterverse.arpitbhayani.me/&quot;&gt;Potterverse&lt;/a&gt;,
feel free to tweet me &lt;a href=&quot;https://twitter.com/arpit_bhayani&quot;&gt;@arpit_bhayani&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Sep 2018 00:00:00 +0530</pubDate>
        <link>https://arpitbhayani.me/blog/building-the-potterverse-search-engine.html</link>
        <guid isPermaLink="true">https://arpitbhayani.me/blog/building-the-potterverse-search-engine.html</guid>
        
        <category>potterverse</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Tech Stack for Potterverse</title>
        <description>&lt;p&gt;Once the idea of &lt;a href=&quot;http://potterverse.arpitbhayani.me/&quot;&gt;Potterverse&lt;/a&gt; was conceived
and list of features was ready, the first hurdle I faced was of deciding on a nice
Tech Stack for building it :grin:. For me deciding a tech stack is never easy, the
engineering dominant side of mine always strives for something that is challenging
and at the same time extremely suited for the use case.&lt;/p&gt;

&lt;p&gt;But here the things were different, I was going for the “fastest” way
to MVP approach and hence some decisions I took while deciding on tech stack were
not something that I would have normally picked.&lt;/p&gt;

&lt;h3 id=&quot;should-i-build-my-own-search-engine&quot;&gt;Should I build my own search engine?&lt;/h3&gt;
&lt;p&gt;With a habit of going with the most difficult engineering problem solve, the first
thought was interesting but was way out of my league :sweat_smile:
I thought of creating my own search engine that is very very “fast” and “suitable”
for my “use case”. I know this sounds totally ridiculous but this is how my brain is
wired :smile:. I was definitely overestimating my abilities.&lt;/p&gt;

&lt;p&gt;If I would have built my search engine, like I did &lt;a href=&quot;https://github.com/arpitbbhayani/wikise&quot;&gt;here&lt;/a&gt;,
from scratch then instead of focusing on Information Retrieval and Data Mining part
of the problem statement, my concerns would have shifted drastically and hence
I somehow controlled my urge and decided to go with &lt;a href=&quot;https://www.elastic.co/&quot;&gt;Elasticsearch&lt;/a&gt;
and first take my raw idea to MVP stage and release the first version it.&lt;/p&gt;

&lt;h3 id=&quot;the-frontend-framework&quot;&gt;The Frontend Framework&lt;/h3&gt;
&lt;p&gt;Vanilla Javascript and basic server side is what I prefer while writing any web based
application; but looking how the frontend world has changed in past few years, it was
customary for me and a high time as well that I also go for a framework that utilizes
highly optimal client side rendering.&lt;/p&gt;

&lt;p&gt;Following were my requirements&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Framework should enable client side rendering&lt;/li&gt;
  &lt;li&gt;Writing a &lt;code&gt;Hello, World&lt;/code&gt; should be simple and understandable&lt;/li&gt;
  &lt;li&gt;Not so steep learning curve&lt;/li&gt;
  &lt;li&gt;Support should be good so that I could reuse what others have already built&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; was the most popular choice but I always had a hard time
with it and hence I went for the second best &lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue.JS&lt;/a&gt;. Vue seemed
ideal for my use case, it is easy to learn, simple, elegant and has lot of community
support.&lt;/p&gt;

&lt;h3 id=&quot;backend-for-rest-endpoints&quot;&gt;Backend for REST endpoints&lt;/h3&gt;
&lt;p&gt;Golang, Python and NodeJS were the languages in contention and Golang is what I chose
to be my primary backend for REST APIs. The reason I chose Golang are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It is fast and efficient&lt;/li&gt;
  &lt;li&gt;It is cheap to maintain when hosted&lt;/li&gt;
  &lt;li&gt;It has very high developer productivity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python is undoubtedly my goto language but when it comes to performance, nothing
can beat Golang. Apart from performance, I was inclined towards one more advantage
of it, which is, it is really cheap to host Golang based code because of its
low memory footprint and portable binaries.&lt;/p&gt;

&lt;h3 id=&quot;hosting&quot;&gt;Hosting&lt;/h3&gt;
&lt;p&gt;Running services and applications in a raw VM hosted in cloud is my thing. I have
always preferred going for a basic EC2 instance for hosting my service. But this time
I did not want to do all that and wanted something that would handle everything, ex:
infrastructure, scaling, etc, for me.&lt;/p&gt;

&lt;p&gt;Serverless was my first choice but again, the amount of restrictions that we need to
cater while working with serverless is too much to bear at this stage. Other big
requirement was that the service should be able to scale down to 0 instances because
the traffic I expect will not be streamlined or continuous instead it will mostly be
burst.&lt;/p&gt;

&lt;p&gt;So for this use case I chose &lt;a href=&quot;https://cloud.google.com/appengine/&quot;&gt;Google App Engine&lt;/a&gt;
which gives me all the flexibility in the world. I would recommend it for very small
use cases like Potterverse but not for giant applications. Since Google App Engine
is what I decided on, I had to use all services provided by Google Cloud. Following
are the services of Google that I am using right now&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Google App Engine (that serves primary REST endpoints)&lt;/li&gt;
  &lt;li&gt;1 Google compute instance (that runs Elasticsearch)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;python-and-jupyter-is-always-there&quot;&gt;Python and Jupyter is always there&lt;/h3&gt;
&lt;p&gt;I have a private Git based repository that holds several Jupyter notebooks that
contains all NLP and IR related code, Elasticsearch based utilities and some
algorithms that are implemented and still in experimental phase.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In conclusion, I have nothing to say :smile:&lt;/p&gt;
</description>
        <pubDate>Tue, 11 Sep 2018 00:00:00 +0530</pubDate>
        <link>https://arpitbhayani.me/blog/tech-stack-for-potterverse.html</link>
        <guid isPermaLink="true">https://arpitbhayani.me/blog/tech-stack-for-potterverse.html</guid>
        
        <category>potterverse</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Why am I building Potterverse?</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://potterverse.arpitbhayani.me&quot;&gt;Potterverse&lt;/a&gt; is meant to be a platform for
Potterheads like me to discover something new, something interesting about the
Wizarding world of Harry Potter. It will be powered by some sophisticated algorithms,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Machine_learning&quot;&gt;Machine Learning&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Natural_language_processing&quot;&gt;Natural Language Processing&lt;/a&gt;,
to bring out details, facts and theories that are buried deep within.&lt;/p&gt;

&lt;h3 id=&quot;how-and-when&quot;&gt;How and when?&lt;/h3&gt;
&lt;p&gt;I have always been high on the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Harry_Potter&quot;&gt;Wizarding world of Harry Potter&lt;/a&gt;
and have loved every bit of it. It has been my hobby, rather passion, to collect and
note every single detail, questionnaire, theory, video that has been made on
Potterverse in a document.&lt;/p&gt;

&lt;p&gt;One lazy weekend I thought of dumping some of this content in a search engine and see
if I could find something; and being a coder I scrapped and dumped the data
in &lt;a href=&quot;https://www.elastic.co/&quot;&gt;Elasticsearch&lt;/a&gt; and Voila! I had my very own search engine
that could search anything from my favourite Wizarding world. While I was writing
the code for it, various ideas and features came to my mind and one thing led to
another and at the end I had a rough list of 30 odd features that I could build
specific to Potterverse … and thus &lt;a href=&quot;https://potterverse.arpitbhayani.me&quot;&gt;Potterverse&lt;/a&gt;
was born.&lt;/p&gt;

&lt;h3 id=&quot;why&quot;&gt;Why?&lt;/h3&gt;

&lt;p&gt;It was the year 2014 when I created &lt;a href=&quot;http://github.com/arpitbbhayani/wikise&quot;&gt;my first search engine&lt;/a&gt;
on top of 43 GB of Wikipedia data, and since then I had an inclination towards
information retrieval and data mining in particular. But in past few years due to some or the other reasons I was unable
to pay enough attention to it.&lt;/p&gt;

&lt;p&gt;In past few months, I again started playing around with lots of text data, started reading
literature about Information Retrieval, Machine Learning, Data Mining and Natural Language Processing,
and thought of applying all of my learnings in a platform that is dedicated for a specific domain - and
I chose my favourite Wizarding world.&lt;/p&gt;

&lt;p&gt;The dataset I chose is from &lt;a href=&quot;http://harrypotter.wikia.com/wiki/Main_Page&quot;&gt;Wikia&lt;/a&gt; which is, in all way,
ideal for basic experimentation needs, as it is not too Big but at the same time not too small either.
The dataset is almost complete, has enough variations to play with and the output can be very easily
judged for relevance and usefulness.&lt;/p&gt;

&lt;p&gt;In the future, apart from the dataset of Wikia, I would start using some Open datasets available, Videos
on YouTube, some Websites like &lt;a href=&quot;https://www.pottermore.com&quot;&gt;Pottermore&lt;/a&gt;, Reddit Threads, etc and make them
discoverable at one &lt;a href=&quot;https://potterverse.arpitbhayani.me&quot;&gt;place&lt;/a&gt; and make this platform - a one stop -
for all potterheads to discover something pottery.&lt;/p&gt;

&lt;p&gt;Last but not the least, I have learnt so much from the Harry Potter community and this platform
is my way of giving back. I really hope Potterheads will find this platform useful.&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Sep 2018 00:00:00 +0530</pubDate>
        <link>https://arpitbhayani.me/blog/why-am-i-building-potterverse.html</link>
        <guid isPermaLink="true">https://arpitbhayani.me/blog/why-am-i-building-potterverse.html</guid>
        
        <category>potterverse</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>How to copy, move files to and from Vagrant machine using scp</title>
        <description>&lt;p&gt;Sometime back when I required to move some files to and from my virtual machine managed by Vagrant, I found that normal SSH/SCP did not work. After searching the internet for sometime I found few solutions, non of which worked like a charm. After trying few things here and there I found a foolproof way to scp files in and out of vagrant machine.&lt;/p&gt;

&lt;p&gt;For &lt;code&gt;scp&lt;/code&gt; , you will need to run the usual scp command but you will need to pass in an extra argument &lt;code&gt;-P&lt;/code&gt; which is the SSH the port to connect to on the remote host.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;scp -P &lt;span class=&quot;m&quot;&gt;2222&lt;/span&gt; -r vagrant@127.0.0.1:/home/vagrant/site . &amp;lt;path-in-host-machine&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By default the virtual machine spun up by vagrant will use &lt;code&gt;2222&lt;/code&gt; as SSH port but to find the port value you can run following command&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;vagrant ssh-config&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Hope this helps :-)&lt;/p&gt;
</description>
        <pubDate>Fri, 16 Mar 2018 00:00:00 +0530</pubDate>
        <link>https://arpitbhayani.me/techie/copy-move-files-to-and-from-vagrant-machine-using-scp.html</link>
        <guid isPermaLink="true">https://arpitbhayani.me/techie/copy-move-files-to-and-from-vagrant-machine-using-scp.html</guid>
        
        <category>vagrant</category>
        
        
        <category>techie</category>
        
      </item>
    
      <item>
        <title>Linkie - Extract meta information about a link</title>
        <description>&lt;p&gt;&lt;code&gt;linkie&lt;/code&gt; is a library that extracts meta information about a link.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;npm install linkie --save&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;linkie&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;linkie&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;linkie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;https://arpitbhayani.me/techie/rest-the-hard-way-with-netcat.html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Output&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://arpitbhayani.me/techie/rest-the-hard-way-with-netcat.html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;arpitbhayani.me&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;HTTP Requests - The Hard Way with Netcat&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;All our lives we have been hitting REST APIs with libraries and utilities like curl and postman. Its time we do it the hard way with netcat, just for fun!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;article&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http-requests&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;s1&quot;&gt;&amp;#39;netcat&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;s1&quot;&gt;&amp;#39;calling rest api with netcat&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;s1&quot;&gt;&amp;#39;calling rest api from microcontroller&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;s1&quot;&gt;&amp;#39;http request messages&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://arpitbhayani.me/static/images/http-requests/http-request-hard-way-with-netcat.jpg&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;api&quot;&gt;API&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Explanation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;url&lt;/code&gt; -&amp;gt; Full URL whose meta information is to be fetched&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;options&lt;/code&gt; -&amp;gt; Options for the fetching
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;verifyImage&lt;/code&gt; -&amp;gt; After successfully extracting image about the link, &lt;code&gt;linkie&lt;/code&gt; can also validate if image really exists or not. By default this option is disabled and hence &lt;code&gt;linkie&lt;/code&gt; will not verify the image. But if you want to verify the image just pass &lt;code&gt;{verifyImage: true}&lt;/code&gt; and &lt;code&gt;linkie&lt;/code&gt; will make another request and verufy if image is valid or not. If image does not exist then metadata will not contain field &lt;code&gt;image&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;callback(err, metadata)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;explain-me-the-output&quot;&gt;Explain me the output&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;url&lt;/code&gt; -&amp;gt; The URL that was fetched.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;status&lt;/code&gt; -&amp;gt; HTTP Response status code&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;host&lt;/code&gt; -&amp;gt; Hostname from which response was served&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;title&lt;/code&gt; -&amp;gt; Title of the page&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;description&lt;/code&gt; -&amp;gt; Meta description about the link&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;type&lt;/code&gt; -&amp;gt; type of the page that link points to&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;keywords&lt;/code&gt; -&amp;gt; Meta keywords about the link&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;image&lt;/code&gt; -&amp;gt; meta image about the link&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;

&lt;h3 id=&quot;video&quot;&gt;Video&lt;/h3&gt;
&lt;p&gt;If a youtube link is given then the metadata will contain field &lt;code&gt;extra&lt;/code&gt; which
will contain the video id in field &lt;code&gt;vid&lt;/code&gt; that you can directly use to embed
in Youtube Player.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://www.youtube.com/watch?v=0cMCo7lyQoY&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;www.youtube.com&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Film Theory: Was SpongeBob ADOPTED?! (SpongeBob SquarePants)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;SUBSCRIBE for More Film Theories! ► http://bit.ly/1dI8VBH You\&amp;#39;ll Die Before this Spongebob Meme ► http://bit.ly/2C3IkhT Gravity Falls ISN’T OVER! ►► http://b...&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;video&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;spongebob&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;s1&quot;&gt;&amp;#39;spongebob squarepants&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;s1&quot;&gt;&amp;#39;spongebob episodes&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;s1&quot;&gt;&amp;#39;spongebob full episodes&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;s1&quot;&gt;&amp;#39;spongebob live&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;s1&quot;&gt;&amp;#39;spongebob remix&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;s1&quot;&gt;&amp;#39;spongebob songs&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;s1&quot;&gt;&amp;#39;spongebob squarepants movie&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;s1&quot;&gt;&amp;#39;...&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;youtube&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;extra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0cMCo7lyQoY&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://i.ytimg.com/vi/0cMCo7lyQoY/maxresdefault.jpg&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;meta-information-and-where-it-fetches-from&quot;&gt;Meta information and where it fetches from&lt;/h3&gt;

&lt;p&gt;The meta information about the link contains several fields. There is a
possibility that some information might not be present on the page, hence
&lt;code&gt;linkie&lt;/code&gt; tries its best to get information. There is fallback on all important
fields. For each of the following fields the list represents the places it
tries to fetch information from.&lt;/p&gt;

&lt;h4 id=&quot;title&quot;&gt;Title&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;OG Title &lt;code&gt;meta[property='og:title']&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;description&quot;&gt;Description&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;OG Description &lt;code&gt;meta[property='og:description']&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;&amp;lt;meta[name='description']&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;All &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags, combined to minimum length of 128 characters.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;image&quot;&gt;Image&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;OG Image &lt;code&gt;meta[property='og:image']&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;First image tag &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;keywords&quot;&gt;Keywords&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;meta[name='keywords']&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;type&quot;&gt;Type&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;OG Type &lt;code&gt;meta[property='og:type']&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;setup-a-development-environment&quot;&gt;Setup a development environment&lt;/h2&gt;

&lt;p&gt;Make sure you have &lt;code&gt;node&lt;/code&gt; and &lt;code&gt;npm&lt;/code&gt; installed.&lt;/p&gt;

&lt;p&gt;Install all the required dependencies&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;npm install&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;start-local-development-server&quot;&gt;Start local development server&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;npm run dev&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will start a local development server that listens on file change and
rebuilds everytime that file is changed.&lt;/p&gt;

&lt;h3 id=&quot;see-if-everythign-is-working&quot;&gt;See if everythign is working&lt;/h3&gt;

&lt;p&gt;In the repository you will find a file named &lt;code&gt;basic.js&lt;/code&gt;, execute the file
and see the output.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;node tst/basic.js&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You should now see the output that looks something like this&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://arpitbhayani.me/techie/rest-the-hard-way-with-netcat.html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;arpitbhayani.me&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;HTTP Requests - The Hard Way with Netcat&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;All our lives we have been hitting REST APIs with libraries and utilities like curl and postman. Its time we do it the hard way with netcat, just for fun!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;article&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;keywords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http-requests&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;s1&quot;&gt;&amp;#39;netcat&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;s1&quot;&gt;&amp;#39;calling rest api with netcat&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;s1&quot;&gt;&amp;#39;calling rest api from microcontroller&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
     &lt;span class=&quot;s1&quot;&gt;&amp;#39;http request messages&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://arpitbhayani.me/static/images/http-requests/http-request-hard-way-with-netcat.jpg&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Sun, 24 Dec 2017 00:00:00 +0530</pubDate>
        <link>https://arpitbhayani.me/projects/linkie-extract-meta-information-about-link-in-nodejs.html</link>
        <guid isPermaLink="true">https://arpitbhayani.me/projects/linkie-extract-meta-information-about-link-in-nodejs.html</guid>
        
        <category>nodejs</category>
        
        <category>metadata</category>
        
        
        <category>projects</category>
        
      </item>
    
      <item>
        <title>Introduction to GraphQL</title>
        <description>&lt;div class=&quot;ui center aligned basic very padded segment&quot;&gt;
    &lt;a class=&quot;ui primary huge button&quot; href=&quot;/presentations/introduction-to-graphql-presentation.html&quot;&gt;
        Link to presentation
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;This is the detailed explanation and elaboration of the talk. Since all the
information cannot be communicated through presentation, I have jot the things
down here.&lt;/p&gt;

&lt;h2 id=&quot;the-request-response-paradigm&quot;&gt;The Request Response Paradigm&lt;/h2&gt;

&lt;p&gt;During the course of evolution of computing, one thing remained constant and
stood as is, &lt;em&gt;The Request Response Paradigm&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In every single phase of evolution there is always someone rather some
machines who has the information required by some seeker. So there is
always a &lt;strong&gt;Client&lt;/strong&gt; who asks for some information from the &lt;strong&gt;Server&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There were lots of protocols that were designed and developed to meet the needs.&lt;/p&gt;

&lt;p&gt;Some are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Native Sockets&lt;/li&gt;
  &lt;li&gt;Remote Procedure Calls&lt;/li&gt;
  &lt;li&gt;SOAP&lt;/li&gt;
  &lt;li&gt;REST&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rest&quot;&gt;REST&lt;/h2&gt;

&lt;p&gt;REST is most widely accepted of all protocols to be used to Request Response
and communication between client and server. Be it from any device, computer,
wearable and now even sensors to any machine residing in cloud, the unanimous
way of having the communication is over REST.&lt;/p&gt;

&lt;p&gt;The primary reason of REST becoming huge was its&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Simplicity&lt;/li&gt;
  &lt;li&gt;Ease of extension&lt;/li&gt;
  &lt;li&gt;Use of HTTP as a channel&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;but-there-are-problems-with-rest&quot;&gt;But! There are problems with REST&lt;/h2&gt;

&lt;p&gt;“What! You did not just say that …” must be reaction of most of you but
just wait for some time and let me explain.&lt;/p&gt;

&lt;h3 id=&quot;endpoint-explosion&quot;&gt;Endpoint Explosion&lt;/h3&gt;

&lt;p&gt;As your application grows, you keep on adding more and more endpoints that
serves different purposes; and thus when a client wants to get some things
done then it has to hit that exact endpoint with the exact HTTP verb to get the
the job done.&lt;/p&gt;

&lt;h3 id=&quot;rely-and-maintain-a-good-documentation&quot;&gt;Rely and Maintain A Good Documentation&lt;/h3&gt;

&lt;p&gt;Once you have a lot of endpoints, then you have to have a really good document
that describes each endpoint, what it does, what params it expects and etc.
It is a well known fact that maintaining document is probably the hardest
thing for a programmer.&lt;/p&gt;

&lt;h3 id=&quot;multiple-requests&quot;&gt;Multiple Requests&lt;/h3&gt;

&lt;p&gt;Often it happens that you have to make multiple requests to get to the
information that is really required. Generally you make one request to get the
&lt;code&gt;id&lt;/code&gt; and other to fetch the actual information.&lt;/p&gt;

&lt;h3 id=&quot;over-fetching&quot;&gt;Over Fetching&lt;/h3&gt;

&lt;p&gt;Over-fetching is when you make a call to the server and receive response that
has information that you require but it also contains information that you
do not require. But why is this a problem, you may ask. This is a problem
because when your user is on a slow network device then every bit of information
matters and if the response from your API has information that will never be
shown to user we are just wasting the bandwidth.&lt;/p&gt;

&lt;h3 id=&quot;under-fetching&quot;&gt;Under Fetching&lt;/h3&gt;

&lt;p&gt;Under-fetching is exact opposite to over-fetching. In Under-fetching you make
a call to server and server returns a response that does not have the
information you require. In most general case you either&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;create a new endpoint with required information&lt;/li&gt;
  &lt;li&gt;make second request to fetch additional information&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;special-endpoints-for-specific-purpose&quot;&gt;Special Endpoints For Specific Purpose&lt;/h3&gt;

&lt;p&gt;You may also need to create special endpoints for special purpose. For example
you already had an endpoint to fetch a todo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /todos
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above endpoint returns you all the todos (full detailed information) for
the user. For some specific purpose you may only want &lt;code&gt;id&lt;/code&gt;s of the todos
instead and hence you will created a specific endpoint that returns only ids&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /todosOnlyIds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or pass a query parameter and process it on server side&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /todos?with=id
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But as your application grows this becomes a huge problem because now you
have tonnes of endpoints that are serving specific purposes and all of the
above problems make things worse.&lt;/p&gt;

&lt;h2 id=&quot;the-graphql&quot;&gt;The GraphQL&lt;/h2&gt;

&lt;p&gt;As always, where there is a problem, there comes a superhero to save the day.
This time that superhero or the super library that comes to the rescue is
GraphQL. GraphQL stands for &lt;strong&gt;Graph Query Language&lt;/strong&gt; and it does not deal
with Graph Databases :)&lt;/p&gt;

&lt;p&gt;GraphQL is a query language for APIs and in simple terms&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What SQL does with databases, GraphQL does with APIs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;brief-history-of-graphql&quot;&gt;Brief History of GraphQL&lt;/h2&gt;

&lt;p&gt;Facebook started using GraphQL in 2012 and have open sourced it in 2015.
Facebook originally developed this in support for their mobile application
but then they realized the impact it created internally and thus decided
to make it publicly available.&lt;/p&gt;

&lt;p&gt;GraphQL was developed as an alternative to REST and is nothing but a
specification and thus any language can just adopt it and build a library
that adheres to the specification and any client that can talk GraphQL will
be able to make calls and get the job done.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Every GraphQL server will expose just one GraphQL endpoint which accepts
a GraphQL Query that is specific to a GraphQL Schema. I know I have bombarded
a lot of GraphQL jargon here but bear with me I will explain each one in
detail here.&lt;/p&gt;

&lt;h3 id=&quot;graphql-server&quot;&gt;GraphQL Server&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;GraphQL server is any web server in any language that adheres to GraphQL
specifications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;GraphQL server exposes just one endpoint which will be the entry point for all
queries that can be made to the server.&lt;/p&gt;

&lt;h3 id=&quot;graphql-schema&quot;&gt;GraphQL Schema&lt;/h3&gt;

&lt;p&gt;The GraphQL server adheres to a GraphQL Schema that defines how a client
can query this server and get the response. GraphQL schema is a strongly typed
schema that has&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Types&lt;/li&gt;
  &lt;li&gt;Query&lt;/li&gt;
  &lt;li&gt;Mutations&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://graphql.org/learn/schema&quot;&gt;others&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A schema for a Todo application looks something like this&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Todo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;is_complete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Boolean&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is_complete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Todo&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Mutation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;createTodo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Todo&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In above schema there is one user defined type named &lt;code&gt;Todo&lt;/code&gt; that has &lt;code&gt;id&lt;/code&gt;,
&lt;code&gt;todo&lt;/code&gt;, &lt;code&gt;created_at&lt;/code&gt; as Strings and &lt;code&gt;is_complete&lt;/code&gt; as a boolean.&lt;/p&gt;

&lt;p&gt;There is root type named &lt;code&gt;Query&lt;/code&gt; that contains all types of queries that can
be made on the endpoint. Let us disect the types of queries that can be made to
the endpoint&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;fetch todos by their state and limit&lt;/li&gt;
  &lt;li&gt;fetch a single todo by its &lt;code&gt;id&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can observe, while defining the queries we have also defined the return
type to each and this enables us to make nested requests if we want to fetch
extra information.&lt;/p&gt;

&lt;p&gt;There is another root type named &lt;code&gt;Mutation&lt;/code&gt; that defines how you can mutate
data, in simple terms insert/delete/modify. In above example we have just one
mutation that defines the way we can create a todo.&lt;/p&gt;

&lt;p&gt;More details can be obtained &lt;a href=&quot;http://graphql.org/learn/queries/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;graphql-types&quot;&gt;GraphQL Types&lt;/h3&gt;

&lt;p&gt;Since GraphQL is strongly typed, you will have to create types for every single
entity. Every type that you define will have fields and each field will have a
scalar or another user defined type associated with it.&lt;/p&gt;

&lt;h4 id=&quot;graphql-scalar-datatypes&quot;&gt;GraphQL Scalar Datatypes&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Int&lt;/code&gt;: A signed 32‐bit integer.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Float&lt;/code&gt;: A signed double-precision floating-point value.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;String&lt;/code&gt;: A UTF‐8 character sequence.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Boolean&lt;/code&gt;: true or false.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ID&lt;/code&gt;: The ID scalar type represents a unique identifier, often used to refetch an object or as the key for a cache. The ID type is serialized in the same way as a String; however, defining it as an ID signifies that it is not intended to be human‐readable.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;graphql-query&quot;&gt;GraphQL Query&lt;/h3&gt;

&lt;p&gt;A GraphQL query is a string that is sent to a server to be interpreted
and fulfilled, which then returns JSON back to the client. Every query also
provides a shape to be returned, this way you always know what you are getting.&lt;/p&gt;

&lt;p&gt;GraphQL Query not only fetches data from the server but it also mutates and
subscribes; hence it depends on the query passed.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;There are some amazing features of GraphQL that I will not discuss here
and will be part of some advanced tutorials.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;graphql-execution&quot;&gt;GraphQL Execution&lt;/h2&gt;

&lt;p&gt;Each field in a GraphQL query has to be backed by a &lt;a href=&quot;http://graphql.org/learn/execution/#root-fields-resolvers&quot;&gt;Resolver Function&lt;/a&gt; that will
have the logic of performing the task and returning the value. The value
returned can be either a scalar value or a GraphQL type. If a field produces a
scalar value, then the execution completes. However if a field produces an
object value then the query will contain another selection of fields which
apply to that object. This continues until scalar values are reached. GraphQL
queries always end at scalar values.&lt;/p&gt;

&lt;p&gt;To imagine this situation, just think of it like a Tree traversal where we keep
on visiting the child nodes and return back when we find leaf node.&lt;/p&gt;

&lt;h3 id=&quot;resolver-function&quot;&gt;Resolver Function&lt;/h3&gt;

&lt;p&gt;Every resolver function will receive 3 arguments&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;obj&lt;/code&gt; The previous object, which for a field on the root Query type is often not used.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;args&lt;/code&gt; The arguments provided to the field in the GraphQL query.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;context&lt;/code&gt; A value which is provided to every resolver.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resolvers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;speaks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Bow Bow &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Whenever a query that asks for speaks field of Dog type then the above resolver
function is called and it would return the text &lt;code&gt;&quot;Bow Bow &quot; + word&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is great feature because, if some field is never asked it’s resolver
function is never called and thus it becomes super efficient as you would
never resolve and fetch information for the field that is never asked.&lt;/p&gt;

&lt;h2 id=&quot;features-of-graphql&quot;&gt;Features of GraphQL&lt;/h2&gt;

&lt;h3 id=&quot;shape&quot;&gt;Shape&lt;/h3&gt;

&lt;p&gt;The main attraction of GraphQL is the data shape i.e. you get what you asked
for, nothing more and definitely nothing less. In the query you made you also
specify the shape and you get the exact thing back in the response.&lt;/p&gt;

&lt;h3 id=&quot;strongly-typed&quot;&gt;Strongly Typed&lt;/h3&gt;

&lt;p&gt;Other prominent feature of GraphQL is its strong typed nature because of which
everything becomes coupled and predictable.&lt;/p&gt;

&lt;h3 id=&quot;protocol-not-storage&quot;&gt;Protocol, not storage&lt;/h3&gt;

&lt;p&gt;GraphQL is not tied with any specific backend or database; it is much more than
that. It works on application layer can perfectly work with your existing
code.&lt;/p&gt;

&lt;h3 id=&quot;version-free&quot;&gt;Version Free&lt;/h3&gt;

&lt;p&gt;One major highlight of the using GraphQL is that it is version free. This is
a bit tricky to understand but bear with me. When new features are added to the
product, additional fields are added to the response and since in GraphQL
client ask for the field that it requires from the server, other fields will
never be picked up and resolve and thus eliminating the need of versioning.&lt;/p&gt;

&lt;p&gt;In addition to this you can also deprecate the field that you no longer need
and client need not be changed and whole functionality will continue to work.&lt;/p&gt;

&lt;h3 id=&quot;documentation-is-right-there&quot;&gt;Documentation is right there&lt;/h3&gt;

&lt;p&gt;One can just look at the schema and understand what is what without any need
of extra documentation what so ever.&lt;/p&gt;

&lt;h2 id=&quot;a-todo-application&quot;&gt;A Todo Application&lt;/h2&gt;

&lt;p&gt;Let us create a todo application that would do the following&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a todo&lt;/li&gt;
  &lt;li&gt;Create a Tag&lt;/li&gt;
  &lt;li&gt;Mark a todo as complete&lt;/li&gt;
  &lt;li&gt;Unmark a completed todo as incomplete&lt;/li&gt;
  &lt;li&gt;Get all todos by its completion status&lt;/li&gt;
  &lt;li&gt;Get one single todo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and each todo will have&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;id&lt;/li&gt;
  &lt;li&gt;task&lt;/li&gt;
  &lt;li&gt;creation time&lt;/li&gt;
  &lt;li&gt;tags&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and each tag will have&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;name&lt;/li&gt;
  &lt;li&gt;color (hex code)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally each tag will also have a reverse mapping of posts that belongs to
the tag.&lt;/p&gt;

&lt;h3 id=&quot;types&quot;&gt;Types&lt;/h3&gt;

&lt;p&gt;First let us define type &lt;code&gt;Todo&lt;/code&gt; that will represent one Todo in the application.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Todo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;is_complete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Boolean&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Other type we will define is &lt;code&gt;Tag&lt;/code&gt; that represents a Tag.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Tag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But we also want that when someone queries for a tag, he/she may also fetch the
todos that belongs to the tag and hence there will be a field named &lt;code&gt;todos&lt;/code&gt; that
will hold list of &lt;code&gt;Todo&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Tag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;NOTE: Since GraphQL only defines how your data looks at the application level
we are totally free to persist information as we like in our databases.&lt;/p&gt;

&lt;h3 id=&quot;mutations&quot;&gt;Mutations&lt;/h3&gt;

&lt;p&gt;We will require following mutations&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Mutation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;createTodo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Todo&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;createTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Tag&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;query&quot;&gt;Query&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is_complete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Todo&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;the-final-graphql-schema&quot;&gt;The Final GraphQL Schema&lt;/h3&gt;

&lt;p&gt;The final GraphQL schema will look something like this&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Tag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Todo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;is_complete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Boolean&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is_complete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Todo&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Mutation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;createTodo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Todo&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;createTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Tag&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;backend-code&quot;&gt;Backend Code&lt;/h3&gt;

&lt;p&gt;For a GraphQL server to handle the mutations and the queries, you just need
to write resolvers for each of them. Just find a suitable GraphQL library
for your favourite language and start writing resolvers.&lt;/p&gt;

&lt;p&gt;I have used NodeJS and have written this application, you can find the complete
code in &lt;a href=&quot;https://github.com/arpitbbhayani/todo-dooby-doo&quot;&gt;this repository&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;graphiql&quot;&gt;Graphiql&lt;/h3&gt;

&lt;p&gt;There is an amazing utility called Graphiql that give a nice interface to make
queries to a GraphQL server. Just set up in the server that serves GraphQL
endpoint and you are good to go.&lt;/p&gt;

&lt;h3 id=&quot;call-graphql-endpoint-with-any-http-client&quot;&gt;Call GraphQL Endpoint with any HTTP client&lt;/h3&gt;

&lt;p&gt;Make HTTP &lt;code&gt;POST&lt;/code&gt; request to GraphQL endpoint with the valid GraphQL
Query, as you provide in Graphiql, and content type set as &lt;code&gt;application/json&lt;/code&gt;
and you will get back the response as you get in Graphiql.&lt;/p&gt;

&lt;p&gt;A sample curl request to understand things better&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;&lt;/span&gt;curl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -X POST &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -H &lt;span class=&quot;s2&quot;&gt;&amp;quot;Content-Type: application/json&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --data &lt;span class=&quot;s1&quot;&gt;&amp;#39;{ &amp;quot;query&amp;quot;: &amp;quot;{ todos { todo } }&amp;quot; }&amp;#39;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    https://localhost:8082/graphql&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h3&gt;

&lt;p&gt;GraphQL is really an amazing utility that can make you life a lot easier. there
are lots of amazing features in GraphQL which I have not discussed here. Stay
tuned to this blog and you would surely see some tutorial coming up.&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Dec 2017 00:00:00 +0530</pubDate>
        <link>https://arpitbhayani.me/talks/introduction-to-graphql.html</link>
        <guid isPermaLink="true">https://arpitbhayani.me/talks/introduction-to-graphql.html</guid>
        
        <category>graphql</category>
        
        <category>beginner</category>
        
        <category>introduction</category>
        
        
        <category>talks</category>
        
      </item>
    
      <item>
        <title>Introduction to GraphQL - Presentation</title>
        <description>&lt;div class=&quot;reveal&quot;&gt;
    &lt;div class=&quot;slides&quot;&gt;
        &lt;section&gt;
            &lt;h2&gt;Introduction to GraphQL&lt;/h2&gt;
            &lt;p&gt;
                Arpit Bhayani&lt;br/&gt;
                @often_weird&lt;br/&gt;
                &lt;a href=&quot;http://arpitbhayani.me&quot;&gt;http://arpitbhayani.me&lt;/a&gt;
            &lt;/p&gt;
        &lt;/section&gt;
        &lt;section&gt;
            &lt;h3&gt;
                The Request Response Paradigm
            &lt;/h3&gt;
            &lt;div class=&quot;fragment fade-in&quot;&gt;
                Some protocols and methods that help us achieve this
                &lt;ul&gt;
                    &lt;li&gt;Native Sockets&lt;/li&gt;
                    &lt;li&gt;Remote Procedure Calls&lt;/li&gt;
                    &lt;li&gt;SOAP&lt;/li&gt;
                    &lt;li&gt;REST&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/section&gt;
        &lt;section&gt;
            &lt;h3&gt;REST&lt;/h3&gt;
            &lt;p&gt;
                Sending request and getting response over HTTP. It can
                optionally use HTTP verbs.
            &lt;/p&gt;
        &lt;/section&gt;
        &lt;section&gt;
            &lt;h3&gt;
                REST became a hit because of its
            &lt;/h3&gt;
            &lt;div&gt;
                &lt;ul&gt;
                    &lt;li&gt;Simplicity&lt;/li&gt;
                    &lt;li&gt;Ease of extension&lt;/li&gt;
                    &lt;li&gt;Use of HTTP as a channel&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/section&gt;
        &lt;section&gt;
            &lt;h3&gt;Problems with REST&lt;/h3&gt;
            &lt;ul&gt;
                &lt;li class=&quot;fragment fade-in&quot;&gt;Endpoint Explosion&lt;/li&gt;
                &lt;li class=&quot;fragment fade-in&quot;&gt;Rely and Maintain A Good Documentation&lt;/li&gt;
                &lt;li class=&quot;fragment fade-in&quot;&gt;Multiple Requests&lt;/li&gt;
                &lt;li class=&quot;fragment fade-in&quot;&gt;Over Fetching&lt;/li&gt;
                &lt;li class=&quot;fragment fade-in&quot;&gt;Under Fetching&lt;/li&gt;
                &lt;li class=&quot;fragment fade-in&quot;&gt;Special Endpoints For Specific Purpose&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/section&gt;
        &lt;section&gt;
            &lt;h1&gt;Welcome GraphQL&lt;/h1&gt;
        &lt;/section&gt;
        &lt;section&gt;
            &lt;h3&gt;GraphQL&lt;/h3&gt;
            &lt;p&gt;
                What SQL does with databases, GraphQL does with APIs.
            &lt;/p&gt;
        &lt;/section&gt;
        &lt;section&gt;
            &lt;h3&gt;Brief History of GraphQL&lt;/h3&gt;
            &lt;ul&gt;
                &lt;li&gt;Facebook built and started using it in 2012&lt;/li&gt;
                &lt;li&gt;Open sourced it in 2015&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/section&gt;
        &lt;section&gt;
            &lt;h3&gt;GraphQL Concepts&lt;/h3&gt;
            &lt;ul&gt;
                &lt;li&gt;GraphQL Server&lt;/li&gt;
                &lt;li&gt;GraphQL Schema&lt;/li&gt;
                &lt;li&gt;GraphQL Types&lt;/li&gt;
                &lt;li&gt;GraphQL Query&lt;/li&gt;
                &lt;li&gt;...&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/section&gt;
        &lt;section&gt;
            &lt;h3&gt;GraphQL Server&lt;/h3&gt;
            &lt;p&gt;
                GraphQL server is any web server in any language that adheres to GraphQL
                specifications.
            &lt;/p&gt;
        &lt;/section&gt;
        &lt;section&gt;
            &lt;h3&gt;GraphQL Schema&lt;/h3&gt;
            &lt;p&gt;
                GraphQL Schema defines how a client can query a GraphQL server
                and get its response.
            &lt;/p&gt;
        &lt;/section&gt;
        &lt;section&gt;
            &lt;h3&gt;GraphQL Types&lt;/h3&gt;
            &lt;ul&gt;
                &lt;li&gt;Scalar Types&lt;/li&gt;
                &lt;li&gt;User Defined Types&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/section&gt;
        &lt;section&gt;
            &lt;h3&gt;GraphQL Query&lt;/h3&gt;
            &lt;p&gt;
                A GraphQL query is a string that is sent to a server to be interpreted
                and fulfilled, which then returns JSON back to the client.
            &lt;/p&gt;
        &lt;/section&gt;
        &lt;section&gt;
            &lt;h3&gt;Resolver Functions&lt;/h3&gt;
            &lt;p&gt;
                Every field in GraphQL Schema is backed by a resolver function
                that would resolve the value for that field.
            &lt;/p&gt;
        &lt;/section&gt;
        &lt;section&gt;
            &lt;h3&gt;Features of GraphQL&lt;/h3&gt;
            &lt;ul&gt;
                &lt;li&gt;Data Shape&lt;/li&gt;
                &lt;li&gt;Strongly Typed&lt;/li&gt;
                &lt;li&gt;Protocol Not Storage&lt;/li&gt;
                &lt;li&gt;Version Free&lt;/li&gt;
                &lt;li&gt;Document is right there&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/section&gt;
        &lt;section&gt;
            &lt;h3&gt;A Todo Application&lt;/h3&gt;
            &lt;ul class=&quot;fragment fade-in&quot;&gt;
                &lt;li&gt;Create a todo&lt;/li&gt;
                &lt;li&gt;Create a Tag&lt;/li&gt;
                &lt;li&gt;Mark a todo as complete&lt;/li&gt;
                &lt;li&gt;Unmark a completed todo as incomplete&lt;/li&gt;
                &lt;li&gt;Get all todos by its completion status&lt;/li&gt;
                &lt;li&gt;Get one single todo&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/section&gt;
        &lt;section&gt;
            &lt;h3&gt;Types&lt;/h3&gt;
            &lt;pre&gt;
type Tag {
    id: String
    name: String
    color: String
    todos: [Todo]
}

type Todo {
    id: String
    todo: String
    created_at: String
    is_complete: Boolean
    tags: [Tag]
}&lt;/pre&gt;
        &lt;/section&gt;
        &lt;section&gt;
            &lt;h3&gt;Query and Mutation&lt;/h3&gt;
            &lt;pre&gt;
type Query {
    todos(is_complete: Boolean!, limit: Int): [Todo]
    todo(id: String): Todo
    tags: [Tag]
}

type Mutation {
    createTodo(todo: String!, tags: [String]): Todo
    createTag(name: String!, color: String): Tag
}&lt;/pre&gt;
        &lt;/section&gt;
        &lt;section&gt;
            &lt;h3&gt;Server Side Code&lt;/h3&gt;
            &lt;a href=&quot;https://github.com/arpitbbhayani/todo-dooby-doo&quot;&gt;Todo Dooby Doo&lt;/a&gt;
        &lt;/section&gt;
        &lt;section&gt;
            &lt;h3&gt;Graphiql&lt;/h3&gt;
            &lt;p&gt;
                Interface to make queries to a GraphQL server
            &lt;/p&gt;
        &lt;/section&gt;
        &lt;section&gt;
            &lt;h3&gt;Calling GraphQL Endpoint with any HTTP Client&lt;/h3&gt;
            &lt;pre&gt;
curl \
    -X POST \
    -H &quot;Content-Type: application/json&quot; \
    --data '{ &quot;query&quot;: &quot;{ todos { todo } }&quot; }' \
    https://localhost:8082/graphql
            &lt;/pre&gt;
        &lt;/section&gt;
        &lt;section&gt;
            &lt;h1&gt;Any Questions?&lt;/h1&gt;
        &lt;/section&gt;
	&lt;/div&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 14 Dec 2017 00:00:00 +0530</pubDate>
        <link>https://arpitbhayani.me/presentations/introduction-to-graphql-presentation.html</link>
        <guid isPermaLink="true">https://arpitbhayani.me/presentations/introduction-to-graphql-presentation.html</guid>
        
        <category>graphql</category>
        
        <category>beginner</category>
        
        <category>introduction</category>
        
        
        <category>presentations</category>
        
      </item>
    
      <item>
        <title>Confusion Matrix Made Simple</title>
        <description>&lt;p&gt;When I started with Data Mining 101, the first thing I came across was known as “The Confusion Matrix”. It seemed interesting at first so I started diving deep. It looked very simple at first, but then when more terms were introduced, things become complicated rather confusing; and then I realized the reason it is called &lt;strong&gt;“The Confusion Matrix”&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The terms True/False Positives/Negatives are really very confusing to remember and hence I found a sleek way to understand it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Just add “ly predicted as” between two words&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So,
True Positive → Truly predicted as Positive
False Positive → Falsely predicted as Positive
True Negative→ Truly predicted as Negative
False Negative → Falsely predicted as Negative&lt;/p&gt;

&lt;h2 id=&quot;interpreting-truefalse-positivenegative&quot;&gt;Interpreting True/False Positive/Negative&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;True Positive:&lt;/strong&gt;
The data point is a True Positive if it is &lt;code&gt;truly&lt;/code&gt; predicted as &lt;code&gt;positive&lt;/code&gt;. If I try to elaborate &lt;code&gt;truly&lt;/code&gt; we get something like this: The data point is a True Positive if it is actually positive and is truly predicted as positive.&lt;/p&gt;

&lt;p&gt;For a food lover:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When a Burger is predicted as Burger and not Hotdog it comes under True Positive.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Burger - Positive Class&lt;/li&gt;
  &lt;li&gt;Hotdog - Negative Class&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For an animal lover:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When a Dog is predicted as God and not Cat it comes under True Positive.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Dog - Positive Class&lt;/li&gt;
  &lt;li&gt;Cat - Negative Class&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;False Positive&lt;/strong&gt;:
It will be interesting when we try to interpret  False Positive.
The data point is a False Positive if it is &lt;code&gt;falsely&lt;/code&gt; predicted as &lt;code&gt;positive&lt;/code&gt;. If I try to elaborate &lt;code&gt;falsely&lt;/code&gt; we get something like this: The data point is &lt;code&gt;False Positive&lt;/code&gt; if it is actually &lt;code&gt;Negative&lt;/code&gt; but it is &lt;code&gt;falsely&lt;/code&gt; predicted as &lt;code&gt;positive&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Again, for a food lover:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When a Hotdog is predicted as Burger, it comes under False Positive&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again, for an animal lover&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When a Cat is predicted as Dog, it comes under False Positive&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Rest you can derive on your own 😉&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In conclusion I would like to say … add “ly predicted as” in the middle.&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Aug 2017 00:00:00 +0530</pubDate>
        <link>https://arpitbhayani.me/techie/confusion-matrix-made-simple.html</link>
        <guid isPermaLink="true">https://arpitbhayani.me/techie/confusion-matrix-made-simple.html</guid>
        
        <category>confusion-matrix</category>
        
        <category>data-science</category>
        
        
        <category>techie</category>
        
      </item>
    
      <item>
        <title>How Sleepsort helped me understand concurrency in golang</title>
        <description>&lt;p&gt;For me learning concurrency have always been tricky; Every language has a different way to handle/emulate concurrency, for example, old languages like Java uses &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/essential/concurrency/&quot;&gt;Threads&lt;/a&gt; and modern languages like NodeJS and Python uses something called as &lt;a href=&quot;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/&quot;&gt;event loops&lt;/a&gt; for its asynchronous IO which is there to make IO based things concurrent.&lt;/p&gt;

&lt;p&gt;Recently I started diving deep into concurrency in &lt;a href=&quot;https://golang.org/&quot;&gt;Golang&lt;/a&gt; and I wanted to start with a good &lt;code&gt;&quot;Hello World&quot;&lt;/code&gt; program for it. This time I thought of taking an unconventional way to write my first concurrent program. Going through various examples over the Internet I could not find anything that made it fun. I suddenly recalled &lt;a href=&quot;http://www.geeksforgeeks.org/sleep-sort-king-laziness-sorting-sleeping/&quot;&gt;Sleepsort&lt;/a&gt; and it was the ideal way (fun + new = &amp;lt;3) to learn concurrency.&lt;/p&gt;

&lt;h3 id=&quot;the-concept&quot;&gt;The Concept&lt;/h3&gt;
&lt;p&gt;For people who do not know what Sleep Sort is, the basic goes something like this:
spin &lt;code&gt;n&lt;/code&gt; threads/co-routine (or whatever concurrent element the language has) for &lt;code&gt;n&lt;/code&gt; numbers (to sort) and for each number &lt;code&gt;x&lt;/code&gt; wait for time proportional to &lt;code&gt;x&lt;/code&gt; (lets say &lt;code&gt;x&lt;/code&gt; seconds) and then print/collect the number.&lt;/p&gt;

&lt;h3 id=&quot;implementation-in-go&quot;&gt;Implementation in Go&lt;/h3&gt;
&lt;p&gt;This is a very basic Implementation of Sleep Sort in Golang using Go Routines and &lt;a href=&quot;https://golang.org/pkg/sync/#WaitGroup&quot;&gt;WaitGroup&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// prints a number of sleeping for n seconds&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sleepAndPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;WaitGroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Sleeping for time proportional to value&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Millisecond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Printing the value&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Sorts given integer slice using sleep sort&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wg&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;WaitGroup&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Creating wait group that waits of len(numbers) of go routines to finish&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;wg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Spinning a Go routine&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sleepAndPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Waiting for all go routines to finish&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;wg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I have published the code in a &lt;a href=&quot;https://github.com/arpitbbhayani/go-sleep-sort&quot;&gt;Github Repository&lt;/a&gt;. Feel
free to fork and play around with it.&lt;/p&gt;

&lt;h3 id=&quot;what-else-can-you-do-with-it&quot;&gt;What else can you do with it&lt;/h3&gt;
&lt;p&gt;I encourage you to try it out, and trust me it is really fun to learn concurrency through this; Apart from running the basic sleep sort you should also try to do/learn with it. For example,&lt;/p&gt;

&lt;p&gt;Concurrency essentials&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Go Channels for inter go-routine communication&lt;/li&gt;
  &lt;li&gt;Mutex for synchronization making things routine-safe&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also try to&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;collect the elements in a slice, in place of printing&lt;/li&gt;
  &lt;li&gt;make Sleep Sort handle negative numbers too&lt;/li&gt;
  &lt;li&gt;sort the numbers in descending order&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you find any interesting way to learn concurrency or any new use case here, please post a comment below.
I would love to know them.&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Jul 2017 00:00:00 +0530</pubDate>
        <link>https://arpitbhayani.me/techie/how-sleepsort-helped-me-understand-concurrency-in-golang.html</link>
        <guid isPermaLink="true">https://arpitbhayani.me/techie/how-sleepsort-helped-me-understand-concurrency-in-golang.html</guid>
        
        <category>golang</category>
        
        <category>concurrency</category>
        
        
        <category>techie</category>
        
      </item>
    
      <item>
        <title>HACKERRANK game-of-two-stacks Solution</title>
        <description>&lt;p&gt;The correct, optimal and working solution for programming question &lt;a href=&quot;https://www.hackerrank.com/challenges/game-of-two-stacks&quot;&gt;game-of-two-stacks&lt;/a&gt; on hackerrank&lt;/p&gt;

&lt;div class=&quot;ui secondary pointing large menu&quot;&gt;
  &lt;a class=&quot;grey item&quot; data-tab=&quot;problem-statement&quot;&gt;
    Problem Statement
  &lt;/a&gt;
  &lt;a class=&quot;active item grey&quot; data-tab=&quot;solution&quot;&gt;
    Solution
  &lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;ui bottom attached tab&quot; data-tab=&quot;problem-statement&quot;&gt;
    &lt;iframe src=&quot;https://www.hackerrank.com/challenges/game-of-two-stacks&quot; width=&quot;100%&quot; height=&quot;600px&quot; style=&quot;overflow: scroll; border: none;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;div class=&quot;ui bottom attached active tab&quot; data-tab=&quot;solution&quot;&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  Author: Arpit Bhayani&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  https://arpitbhayani.me&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;climits&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;deque&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;list&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;limits&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;set&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stack&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#define ll long long&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#define MIN(a, b) a &amp;lt; b ? a : b&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define MAX(a, b) a &amp;gt; b ? a : b&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%d%d%lld&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/div&gt;
</description>
        <pubDate>Fri, 14 Jul 2017 00:00:00 +0530</pubDate>
        <link>https://arpitbhayani.me/hackerrank/game-of-two-stacks.html</link>
        <guid isPermaLink="true">https://arpitbhayani.me/hackerrank/game-of-two-stacks.html</guid>
        
        <category>competitive-programming</category>
        
        <category>programming</category>
        
        
        <category>hackerrank</category>
        
      </item>
    
  </channel>
</rss>
